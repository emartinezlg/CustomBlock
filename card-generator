%%[
/* -------- Strong server-side gate for the editor endpoint -------- */
var @ref, @origin, @dest, @ok, @host, @orig

set @ref   = HTTPRequestHeader("Referer")
set @origin= HTTPRequestHeader("Origin")
set @dest  = HTTPRequestHeader("Sec-Fetch-Dest")
set @ok    = "false"

/* 1) Allow when Referer is a known Marketing Cloud host */
if not empty(@ref) then
  set @host = Lowercase(@ref)
  if IndexOf(@host, ".exacttarget.com") > 0 then set @ok = "true" endif
  if IndexOf(@host, ".salesforce.com")  > 0 then set @ok = "true" endif
  if IndexOf(@host, ".marketingcloudapps.com") > 0 then set @ok = "true" endif
endif

/* 2) Fallback: some browsers send Origin instead of Referer */
if @ok == "false" and not empty(@origin) then
  set @orig = Lowercase(@origin)
  if IndexOf(@orig, ".exacttarget.com") > 0 then set @ok = "true" endif
  if IndexOf(@orig, ".salesforce.com")  > 0 then set @ok = "true" endif
  if IndexOf(@orig, ".marketingcloudapps.com") > 0 then set @ok = "true" endif
endif

/* 3) If the browser provides Sec-Fetch-Dest and it's not an iframe, block */
if not empty(@dest) and Lowercase(@dest) != "iframe" then
  set @ok = "false"
endif

/* 4) If not allowed, redirect BEFORE any HTML is emitted */
if @ok == "false" then
  Redirect("https://www.stib-mivb.be/")
endif
]%%

<script runat="server">
  /* Only allow this page to be framed by MC domains */
  Platform.Response.SetResponseHeader(
    "Content-Security-Policy",
    "frame-ancestors https://*.exacttarget.com https://*.salesforce.com https://*.marketingcloudapps.com"
  );
</script>


<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Modular Content Block Editor</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Block SDK -->
  <script src="https://cloud.info.stib-mivb.brussels/customblock-sdk"></script>

  <!-- Font Awesome (icons) -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"/>
  <!-- Font STIB -->
  <link rel="stylesheet" href="https://cloud.info.stib-mivb.brussels/brusseline.css">

<style>
  :root{
    --bg:#99C9E6;                 
    --cardBg:#D9D9DD;            
    --pri:#005F9A;              
    --pri-ink:#ffffff;
    --ink:#2f2f2f;
    --muted:#4b5563;
    --br:14px;
    --gap:10px;
    --active:#CCE4F2;
  }

  body{
    background:var(--bg);
    color:var(--ink);
    font-family:Brusseline, Arial, sans-serif; /* use Brusseline */
  }

  /* Container remains single column to fit the narrow Email Studio pane */
  .app{display:flex;flex-direction:column;gap:var(--gap);padding:var(--gap);height:100vh;max-width:440px}

  /* Neutral panel wrapper (no background) */
  .panel{background:transparent;border-radius:0;padding:0;overflow:auto}

  /* New visual cards */
  .card{
    background:var(--cardBg);
    border-radius:var(--br);
    padding:12px;
    margin-bottom:10px;
  }

  /* Card headings */
  .card > h2{
    margin:0 0 8px;
    font-size:16px;
    line-height:1.2;
    color:#0b2a3b; /* reads well on #99C9E6 */
    display:flex; align-items:center; gap:8px;
  }
  .subhead{ margin:8px 0 6px; font-size:14px; color:#0b2a3b; }

  /* Structure list items remain white for contrast on the blue card */
  .stack{display:grid;gap:8px;margin-bottom:8px}
  .item{
    display:flex;align-items:center;gap:8px;
    padding:8px;border:1px dashed #005F9A;border-radius:10px;background:#fff;
  }
  .item.is-active{ background: var(--active) !important; border-color:#005F9A !important; }
  .kind{font-weight:600;flex:1}
  .actions{display:flex;gap:6px}

  .toolbar{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:8px}
  .btn{display:inline-flex;align-items:center;gap:8px;border:1px solid #005F9A;border-radius:10px;padding:7px 10px;background:#fff;cursor:pointer;font-size:14px}
  .btn.icon{width:34px;height:34px;justify-content:center}
  .btn.primary{background:var(--pri);color:var(--pri-ink);border-color:transparent}
  .btn-accent{background:var(--pri)!important;color:#fff!important;border-color:transparent!important}
  .accent{color:var(--pri)}

  .library-results{min-height:72px;color:#0b2a3b;font-size:12px}
  .library-results .library-message{display:block;padding:6px 0;opacity:.7}
  .library-carousel{display:flex;align-items:center;gap:8px;padding:4px 0}
  .library-carousel.is-nav-hidden .carousel-nav{visibility:hidden}
  .library-carousel__viewport{flex:1;overflow:hidden;max-width:480px}
  .library-carousel__track{display:flex;gap:10px;transition:transform .3s ease}
  .library-card{background:#fff;border:1px solid #cfe6f3;border-radius:10px;min-width:140px;max-width:160px;flex:0 0 140px;padding:8px;display:flex;flex-direction:column;align-items:center;gap:6px;cursor:pointer;transition:border-color .2s,box-shadow .2s}
  .library-card:focus-visible,.library-card:hover{border-color:#005F9A;box-shadow:0 0 0 2px rgba(0,95,154,.2)}
  .library-card__thumb{width:100%;aspect-ratio:1;border-radius:8px;overflow:hidden;background:#f3f8fb;display:flex;align-items:center;justify-content:center}
  .library-card__thumb img{width:100%;height:100%;object-fit:cover}
  .library-card__name{font-size:12px;text-align:center;color:#0b2a3b;word-break:break-word}
  .carousel-nav{border:1px solid #cfe6f3;background:#fff;color:#005F9A;border-radius:50%;width:32px;height:32px;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:background .2s,color .2s}
  .carousel-nav:hover,.carousel-nav:focus-visible{background:#005F9A;color:#fff}
  .carousel-nav[disabled]{opacity:.4;cursor:not-allowed}
  .library-query{flex:1;min-width:0}

  .field{display:grid;gap:6px;margin-bottom:10px}
  .field label{font-size:12px;color:#0b2a3b}
  input[type="text"],input[type="url"],textarea,select{
    width:90%;padding:8px 10px;border:1px solid #cfe6f3;border-radius:10px;font:inherit;background:#fff
  }
  .rte-controls{position: relative;display:flex;gap:8px;margin-bottom:6px}
  .rte-btn{border:1px solid #dbeafe;border-radius:10px;padding:6px 8px;background:#fff;cursor:pointer;font-size:13px}
  .rte-area{border:1px solid #cfe6f3;border-radius:10px;padding:8px 10px;min-height:110px;background:#fff}
  .muted{color:#0b2a3b;opacity:.7;font-size:12px}
  .color-pop{ position: absolute; right: 0; top: 40px; background: #fff; border: 1px solid #cfe6f3; border-radius: 10px; width: 260px; padding: 10px; box-shadow: 0 8px 24px rgba(0,0,0,.08); z-index: 9999;}
   .color-grid{ display: grid; grid-template-columns: repeat(8, 1fr); gap: 6px; margin-bottom: 8px; }          .color-grid .swatch{ width: 22px; height: 22px; border-radius: 4px; border: 1px solid #cfe6f3; cursor: pointer; }
  .color-row{ display:flex; align-items:center; gap:8px; margin-bottom: 6px; } #colorInput{ flex: 1; padding: 6px 8px; border:1px solid #cfe6f3; border-radius: 8px; font: inherit; } 
  .color-preview{ width: 26px; height: 26px; border:1px solid #cfe6f3; border-radius: 6px; background: #7D7E7F; }
  .color-actions{ display:flex; gap:8px; justify-content:flex-end; }


</style>

</head>
<body>
<div class="app">
  <section class="panel">
  <!-- Card 1: Structure -->
  <div id="cardStructure" class="card">
    <h2><i class="fa-regular fa-rectangle-list accent"></i> Structure</h2>
    <div id="stack" class="stack"></div>

    <h3 class="subhead"><i class="fa-solid fa-plus accent"></i> Add</h3>
    <div class="toolbar" id="addToolbar">
      <button data-add="h1" class="btn"><i class="fa-solid fa-heading"></i> H1</button>
      <button data-add="text" class="btn"><i class="fa-regular fa-file-lines"></i> Free text</button>
      <button data-add="cta" class="btn"><i class="fa-solid fa-square-arrow-up-right"></i> Single CTA</button>
      <button data-add="doubleCta" class="btn"><i class="fa-regular fa-square-plus"></i> Double CTA</button>
    </div>
  </div>

  <!-- Card 2: Properties -->
  <div id="cardProps" class="card">
    <h2><i class="fa-solid fa-gears accent"></i> Properties</h2>

    <div id="propNone" class="muted">Select an element to edit its properties.</div>

<!-- Header -->
<div id="propHeader" hidden>
  <div class="field">
    <!-- One line: radios + (when Image) the dropdown -->
    <div class="toolbar" style="min-height:35px; display:flex; align-items:center; gap:8px; flex-wrap:nowrap;">
      <label class="btn"><input type="radio" name="hdrType" value="none"> No image</label>
      <label class="btn"><input type="radio" name="hdrType" value="image"> Image</label>

      <!-- Image flow (inline in same row) -->
      <div id="hdrImageGate" hidden>
        <select id="hdrImgSource" style="width:auto; max-width:140px; ">
          <option value="" selected disabled>Source?</option>
          <option value="url">üîó URL</option>
          <option value="library">üñºÔ∏è Library search</option>
        </select>
      </div>
    </div>
  </div>

  <!-- keep the rest (Alt, URL row, Library row, etc.) as-is -->
  <div id="hdrAltRow" class="field" hidden>
    <label>Alt text</label>
    <input type="text" id="hdrAlt" placeholder="Describe the header image" />
  </div>

  <div id="hdrUrlRow" class="field" hidden>
    <label>Image URL</label>
    <input type="url" id="hdrImgUrl" placeholder="https://..." />
  </div>

<div id="hdrLibRow" class="field" hidden>
  <label>Search library</label>
  <div class="toolbar">
    <input type="text" id="hdrLibQuery" class="library-query" placeholder="Search term‚Ä¶" hidden />
    <button id="hdrLibSearch" class="btn icon" title="Search">
      <i class="fa-solid fa-magnifying-glass"></i>
    </button>
    <!-- NEW: Browse modal trigger -->
    <button id="hdrLibBrowse" class="btn" title="Browse folders">
      <i class="fa-regular fa-folder-open"></i> Browse
    </button>
  </div>
  <div id="hdrLibResults" class="library-results"></div>
</div>

</div>


    <!-- H1 -->
    <div id="propH1" hidden>
      <div class="field">
        <label>Text</label>
        <input type="text" id="h1Text" placeholder="This is H1" />
      </div>
    </div>

    <!-- Free Text -->
    <div id="propText" hidden>
      <div class="field">
        <label>Free text</label>
        <div class="rte-controls">
          <button class="rte-btn" id="rteBold" title="Bold"><i class="fa-solid fa-bold"></i></button>
          <button class="rte-btn" id="rteItalic" title="Italic"><i class="fa-solid fa-italic"></i></button>
          <button class="rte-btn" data-cmd="insertUnorderedList" title="Bulleted list"><i class="fa-solid fa-list-ul"></i></button>
          <button class="rte-btn" id="rteLink" title="Insert link"><i class="fa-solid fa-link"></i></button>
          <button class="rte-btn" id="rteUnlinkAll" title="Remove link (delete whole linked phrase)"><i class="fa-solid fa-link-slash"></i></button>
          <button class="rte-btn" id="rteColor" title="Text color"><i class="fa-solid fa-palette"></i></button>
          
<!-- Color picker tooltip -->
<div id="colorPicker" class="color-pop" hidden>
  <div class="color-grid" id="colorSwatches"></div>
  <div class="color-row">
    <span class="muted" style="min-width:60px">Hex</span>
    <input type="text" id="colorInput" placeholder="#005F9A" />
    <div id="colorPreview" class="color-preview" title="Preview"></div>
  </div>
  <div class="color-actions">
    <button class="btn" id="colorReset" type="button">Reset</button>
    <button class="btn primary" id="colorApply" type="button">Apply</button>
  </div>
</div>
          
        </div>
        <div id="textHtml" class="rte-area" contenteditable="true"
             data-placeholder="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ut risus nunc. Donec porta quis erat sed mattis."></div>
      </div>
    </div>

    <!-- Single CTA -->
    <div id="propCTA" hidden>
      <div class="field">
        <label>Button text</label>
        <input type="text" id="ctaText" placeholder="SINGLE CTA >" />
      </div>
      <div class="field">
        <label>Link (URL)</label>
        <input type="url" id="ctaHref" placeholder="https://..." />
      </div>
    </div>

    <!-- Double CTA -->
    <div id="propDoubleCTA" hidden>
      <div class="field">
        <label>CTA 1 text</label>
        <input type="text" id="cta1Text" placeholder="CTA 1 >" />
      </div>
      <div class="field">
        <label>CTA 1 link</label>
        <input type="url" id="cta1Href" placeholder="https://..." />
      </div>
      <div class="field">
        <label>CTA 2 text</label>
        <input type="text" id="cta2Text" placeholder="CTA 2 >" />
      </div>
      <div class="field">
        <label>CTA 2 link</label>
        <input type="url" id="cta2Href" placeholder="https://..." />
      </div>
    </div>
  </div>
</section>

</div>

  
<script>
/** ===========================
 *  CONFIG ‚Äî SET THESE
 *  ===========================
 */
// SAFE AMPscript string (kept out of UI; appended to email HTML)
const FOOTER_TOKEN = '%' + '%=ContentBlockByKey("CUSTOMER_KEY")=%' + '%';

const ASSETS = {
  list   : 'https://cloud.info.stib-mivb.brussels/Assets-data-handler?action=list',        // simple text search
  folders: 'https://cloud.info.stib-mivb.brussels/Assets-data-handler?action=folders',     // folder tree
  query  : 'https://cloud.info.stib-mivb.brussels/Assets-data-handler?action=assetsQuery', // filter/sort/paginate
  browserPage: 'https://cloud.info.stib-mivb.brussels/AssetBrowserWindow'                 // standalone browser UI
};

const BROWSER_URL = (()=>{ try{ return new URL(ASSETS.browserPage); }catch(e){ return null; } })();
const BROWSER_ORIGIN = BROWSER_URL ? BROWSER_URL.origin : null;
let browseWindow = null;

// Utilities
const $$   = s => document.querySelector(s);
const $all = s => Array.from(document.querySelectorAll(s));
const escapeHtml = s => (s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
const debounce = (fn,t=200)=>{let to;return(...a)=>{clearTimeout(to);to=setTimeout(()=>fn(...a),t);}};
const setVis = (id, visible) => { const el = typeof id==='string' ? $$('#'+id) : id; if(!el) return; el.hidden = !visible; el.style.display = visible ? '' : 'none'; el.setAttribute('aria-hidden', visible ? 'false' : 'true'); };

// Block SDK
let sdk;
try{ sdk = new window.sfdc.BlockSDK({ tabs: [] }); }catch(e){ console.warn('BlockSDK not found; preview-only mode.'); }

if (!window.__assetBrowserMessageBound){
  window.addEventListener('message', handleAssetBrowserMessage);
  window.__assetBrowserMessageBound = true;
}

/** ===========================
 *  DATA MODEL
 *  ===========================
 */
let state = { blocks: [], selectedIndex: -1 };

const DEFAULTS = {
  header   : { type:'header',   mode:'none', img:{ src:'', alt:'', source:'' } },
  h1       : { type:'h1',       name:'H1',          text:'This is H1' },
  text     : { type:'text',     name:'Free text',   html:'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ut risus nunc. Donec porta quis erat sed mattis.' },
  cta      : { type:'cta',      name:'Single CTA',  text:'SINGLE CTA >', href:'#' },
  doubleCta: { type:'doubleCta',name:'Double CTA',  items:[{text:'CTA 1 >',href:'#'},{text:'CTA 2 >',href:'#'}] }
};

// ===== AUTOSAVE =====
const autoSave = debounce(()=>{
  if (!sdk || !sdk.setContent || !sdk.setData) return;
  sdk.setData({ blocks: state.blocks });
  sdk.setContent(generateHTML());
}, 150);

function autoSaveNow(){
  if (!sdk || !sdk.setContent || !sdk.setData) return;
  sdk.setData({ blocks: state.blocks });
  sdk.setContent(generateHTML());
}

// Ensure exactly one header at index 0, with defaults; optionally persist now
function normalizeHeader(persistNow=false){
  const defaults = JSON.parse(JSON.stringify(DEFAULTS.header));
  let headers = state.blocks.filter(b => b && b.type === 'header');

  if (headers.length === 0){
    state.blocks = [defaults, ...state.blocks];
  } else {
    const firstHeader = headers[0];
    state.blocks = state.blocks.filter(b => b && b.type !== 'header');
    firstHeader.mode = firstHeader.mode || 'none';
    firstHeader.img = firstHeader.img || { src:'', alt:'', source:'' };
    state.blocks.unshift(firstHeader);
  }
  if (persistNow) autoSaveNow();
}

/** ===========================
 *  TEXT COLOR PICKER
 *  ===========================
 */
const DEFAULT_TEXT_COLOR = '#7D7E7F';
const COLOR_SWATCHES = [
  '#000000','#7D7E7F','#FFFFFF',
  '#005F9A','#99C9E6',
  '#FF0000','#FF6B00','#FFC107',
  '#00A859','#2E7D32',
  '#3F51B5','#00ACC1',
  '#7B1FA2','#C2185B',
  '#795548','#9E9E9E'
];

let savedSel = null;
function saveSelection(){
  const sel = window.getSelection();
  savedSel = (sel && sel.rangeCount) ? sel.getRangeAt(0).cloneRange() : null;
}
function restoreSelection(){
  if (!savedSel) return false;
  const sel = window.getSelection();
  sel.removeAllRanges(); sel.addRange(savedSel);
  return true;
}
function normalizeHex(v){
  if (!v) return '';
  v = v.trim();
  if (v[0] !== '#') v = '#'+v;
  if (/^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(v)){
    if (v.length===4) v = '#'+v[1]+v[1]+v[2]+v[2]+v[3]+v[3];
    return v.toUpperCase();
  }
  return '';
}
function buildColorSwatches(){
  const grid = $$('#colorSwatches');
  if (!grid) return;
  grid.innerHTML = COLOR_SWATCHES.map(c => (
    `<button type="button" class="swatch" data-col="${c}" title="${c}" style="background:${c}"></button>`
  )).join('');
  $all('#colorSwatches .swatch').forEach(btn=>{
    btn.addEventListener('click', (e)=>{
      const col = e.currentTarget.dataset.col;
      applyColor(col);
      hideColorPicker();
    });
  });
}
function applyColor(hex){
  const v = normalizeHex(hex);
  if (!v) return;
  restoreSelection();
  try{ document.execCommand('styleWithCSS', false, true); }catch(e){}
  document.execCommand('foreColor', false, v);
  captureTextHtml();
}
function showColorPicker(){
  const pop = $$('#colorPicker'); if (!pop) return;
  saveSelection();
  if (!pop.dataset.ready){ buildColorSwatches(); pop.dataset.ready='1'; }
  const input = $$('#colorInput'), prev = $$('#colorPreview');
  if (input) input.value = '';
  if (prev)  prev.style.background = DEFAULT_TEXT_COLOR;
  pop.hidden = false;
}
function hideColorPicker(){
  const pop = $$('#colorPicker'); if (pop) pop.hidden = true;
}

/** ===========================
 *  RENAME SECTION
 *  ===========================
 */
function defaultNameFor(b){
  return ({
    header:'Header',  // Capitalized
    h1:'H1',
    text:'Free text',
    cta:'Single CTA',
    doubleCta:'Double CTA'
  })[b.type] || b.type;
}
function ensureRenameButton(labelEl, onClick){
  let btn = labelEl.querySelector('button[data-rename]');
  if (!btn){
    btn = document.createElement('button');
    btn.type = 'button';
    btn.dataset.rename = '1';
    btn.title = 'Rename section';
    btn.innerHTML = '<i class="fa-regular fa-pen-to-square"></i>';
    btn.style.marginLeft = '6px';
    btn.style.border = 'none';
    btn.style.background = 'transparent';
    btn.style.cursor = 'pointer';
    labelEl.appendChild(btn);
  }
  btn.onclick = onClick;
  return btn;
}
function setLabelTextWithButton(labelEl, text){
  const btn = labelEl.querySelector('button[data-rename]');
  labelEl.textContent = text;
  if (btn) labelEl.appendChild(btn);
}
function attachRenameUI(sectionId, b){
  const section = $$('#'+sectionId);
  if (!section) return;
  const firstLabel = section.querySelector('.field label');
  if (!firstLabel) return;

  const currentName = (b.name && b.name.trim()) ? b.name.trim() : defaultNameFor(b);
  setLabelTextWithButton(firstLabel, currentName);

  ensureRenameButton(firstLabel, ()=>{
    const proposed = prompt('Section name', currentName);
    if (proposed === null) return;
    const clean = proposed.trim();
    b.name = clean || defaultNameFor(b);
    setLabelTextWithButton(firstLabel, b.name);
    renderStack();
    autoSave();
  });
}

/** ===========================
 *  INIT
 *  ===========================
 */
(async function bootstrap(){
  if (sdk && sdk.getData){
    sdk.getData(data=>{
      state.blocks = (data && Array.isArray(data.blocks)) ? data.blocks : [];
      normalizeHeader(true);
      state.blocks = state.blocks.map(b=>{
        if (!b || !b.type) return b;
        if (['h1','text','cta','doubleCta'].includes(b.type) && !b.name){
          b.name = defaultNameFor(b);
        }
        if (b.type==='header' && b.img && b.img.source === 'upload'){ b.img.source=''; }
        return b;
      });
      state.selectedIndex = -1;   // do NOT auto-open properties
      renderAll();
      patchImageSourceSelect();   // ensure options/labels are correct & upload removed
    });
  } else {
    state.blocks = [ JSON.parse(JSON.stringify(DEFAULTS.header)) ];
    normalizeHeader(false);
    state.selectedIndex = -1;
    renderAll();
    patchImageSourceSelect();
  }

  // Adders
  $all('[data-add]').forEach(b => b.addEventListener('click', () => { addBlock(b.dataset.add); }));

  // Free-text toolbar ‚Äî Bold / Italic, Bullets, Link, Remove link (unwrap), Color
  const bindIf = (id, handler) => { const el = $$('#'+id); if (el) el.addEventListener('click', handler); };
  bindIf('rteBold',   ()=>{ document.execCommand('bold', false, null);   captureTextHtml(); });
  bindIf('rteItalic', ()=>{ document.execCommand('italic', false, null); captureTextHtml(); });

  $all('.rte-btn[data-cmd]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      document.execCommand(btn.dataset.cmd,false,null);
      captureTextHtml();
    });
  });
  bindIf('rteLink', ()=>{
    const url = prompt('Link URL (https://‚Ä¶)');
    if (url){ document.execCommand('createLink', false, url); captureTextHtml(); }
  });
  bindIf('rteUnlinkAll', ()=>{ unwrapEntireLink(); captureTextHtml(); });

  // Color picker bindings
  bindIf('rteColor', (e)=>{ e.preventDefault(); showColorPicker(); });
  const colorInput = $$('#colorInput');
  if (colorInput){
    colorInput.addEventListener('input', (e)=>{
      const hx = normalizeHex(e.target.value) || 'transparent';
      const prev = $$('#colorPreview'); if (prev) prev.style.background = hx;
    });
    colorInput.addEventListener('keydown', (e)=>{
      if (e.key === 'Enter'){
        e.preventDefault();
        const val = normalizeHex(colorInput.value);
        if (val){ applyColor(val); hideColorPicker(); }
      }
    });
  }
  bindIf('colorApply', ()=>{
    const val = normalizeHex($$('#colorInput')?.value || '');
    if (val){ applyColor(val); }
    hideColorPicker();
  });
  bindIf('colorReset', ()=>{ applyColor(DEFAULT_TEXT_COLOR); hideColorPicker(); });

  // Close color palette when clicking outside / Esc
  document.addEventListener('mousedown', (e)=>{
    const pop = $$('#colorPicker');
    if (!pop || pop.hidden) return;
    const trigger = $$('#rteColor');
    if (!pop.contains(e.target) && e.target !== trigger) hideColorPicker();
  });
  document.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') hideColorPicker(); });
})();

/** ===========================
 *  STRUCTURE
 *  ===========================
 */
function addBlock(type){
  if (type==='header') return;
  const clone = JSON.parse(JSON.stringify(DEFAULTS[type]));
  if (['h1','text','cta','doubleCta'].includes(type) && !clone.name){
    clone.name = defaultNameFor(clone);
  }
  state.blocks.push(clone);
  state.selectedIndex = state.blocks.length-1;
  renderAll();
  autoSave();
}

function removeBlock(i){
  if (i===0 && state.blocks[0]?.type==='header') return; // lock header
  state.blocks.splice(i,1);
  state.selectedIndex = -1;
  renderAll();
  autoSave();
}

function moveBlock(i,dir){
  if (i===0) return;
  const j = i + dir;
  if (j<1 || j>=state.blocks.length) return;
  const tmp = state.blocks[i]; state.blocks[i]=state.blocks[j]; state.blocks[j]=tmp;
  state.selectedIndex = j;
  renderAll();
  autoSave();
}

function renderAll(){ renderStack(); renderProps(); }

function renderStack(){
  const wrap = $$('#stack'); if (!wrap) return;
  wrap.innerHTML='';
  state.blocks.forEach((b,i)=>{
    const el = document.createElement('div'); el.className='item';

    // highlight currently edited item with #CCE4F2
    if (i === state.selectedIndex){
      el.style.background = '#CCE4F2';
      el.style.borderColor = '#005F9A';
    }

    el.innerHTML = `
      <div class="kind">${iconFor(b.type)} ${labelFor(b)}</div>
      <div class="actions">
        ${i===0 ? '' : '<button class="btn icon" data-act="up" title="Up"><i class="fa-solid fa-chevron-up"></i></button>'}
        ${i===0 ? '' : '<button class="btn icon" data-act="down" title="Down"><i class="fa-solid fa-chevron-down"></i></button>'}
        ${i===0 ? '' : '<button class="btn icon" data-act="remove" title="Remove"><i class="fa-regular fa-trash-can"></i></button>'}
        <button class="btn icon" data-act="edit" title="Edit"><i class="fa-regular fa-pen-to-square"></i></button>
      </div>`;

    // Bind by action (order-agnostic)
    const up = el.querySelector('[data-act="up"]');
    const down = el.querySelector('[data-act="down"]');
    const remove = el.querySelector('[data-act="remove"]');
    const edit = el.querySelector('[data-act="edit"]');

    if (up) up.onclick = ()=>moveBlock(i,-1);
    if (down) down.onclick = ()=>moveBlock(i,+1);
    if (remove) remove.onclick = ()=>removeBlock(i);
    if (edit) edit.onclick = ()=>{
      state.selectedIndex=i;
      renderStack();
      renderProps();
      scrollPropsIntoView();
    };

    wrap.appendChild(el);
  });
}

/** ===========================
 *  PROPERTIES
 *  ===========================
 */
function renderProps(){
  ['propNone','propHeader','propH1','propText','propCTA','propDoubleCTA'].forEach(id=> setVis(id,false));
  if (state.selectedIndex<0){ setVis('propNone',true); return; }
  const b = state.blocks[state.selectedIndex];

  switch(b.type){
    case 'header': {
      setVis('propHeader',true);
      // radios
      $all('input[name="hdrType"]').forEach(r=>{
        r.checked = (r.value === (b.mode||'none'));
        r.onchange = ()=>{
          b.mode = r.value;
          if (b.mode === 'none'){
            b.img = { src:'', alt:'', source:'' };
          }
          toggleHeaderPanels(b);
          autoSave();
        };
      });

      // init visibility & normalize legacy
      if (b.img && b.img.source === 'upload'){ b.img.source=''; }
      toggleHeaderPanels(b);

      // source select
      const srcSel = $$('#hdrImgSource');
      if (srcSel){
        srcSel.value = b.img?.source || '';
        srcSel.onchange = e => { b.img.source=e.target.value; toggleSourceRows(b); autoSave(); };
      }

      // URL
      const urlEl = $$('#hdrImgUrl');
      if (urlEl){
        urlEl.value = b.img?.src || '';
        urlEl.oninput = debounce(e=>{ b.img.src=e.target.value; autoSave(); },150);
      }

      // Library quick search
      const libBtn = $$('#hdrLibSearch');
      if (libBtn && !libBtn.dataset.bound){
        libBtn.dataset.bound = '1';
        libBtn.addEventListener('click', ()=>{ triggerHeaderLibrarySearch(b); });
      }

      const browseBtn = $$('#hdrLibBrowse');
      if (browseBtn && !browseBtn.dataset.bound){
        browseBtn.dataset.bound = '1';
        browseBtn.addEventListener('click', ()=>{ openAssetBrowserWindow(); });
      }

      // Alt
      const altEl = $$('#hdrAlt');
      if (altEl){
        altEl.value = b.img?.alt || '';
        altEl.oninput = debounce(e=>{ b.img.alt=e.target.value; autoSave(); },150);
      }

      // Ensure dropdown labels/options are correct (in case DOM changed)
      patchImageSourceSelect();
      break;
    }
    case 'h1': {
      setVis('propH1',true);
      attachRenameUI('propH1', b);
      const t = $$('#h1Text');
      if (t){
        t.value = b.text || '';
        t.oninput = debounce(e=>{ b.text=e.target.value; autoSave(); },150);
      }
      break;
    }
    case 'text': {
      setVis('propText',true);
      attachRenameUI('propText', b);
      const area = $$('#textHtml');
      if (area){
        area.innerHTML = b.html || area.dataset.placeholder || '';
        area.oninput = debounce(()=> { captureTextHtml(); },150);
        area.addEventListener('keyup', saveSelection);
        area.addEventListener('mouseup', saveSelection);
        area.addEventListener('touchend', saveSelection);
      }
      break;
    }
    case 'cta': {
      setVis('propCTA',true);
      attachRenameUI('propCTA', b);
      const txt = $$('#ctaText'), href = $$('#ctaHref');
      if (txt){ txt.value = b.text || ''; txt.oninput = debounce(e=>{ b.text=e.target.value; autoSave(); },150); }
      if (href){ href.value = b.href || ''; href.oninput = debounce(e=>{ b.href=e.target.value; autoSave(); },150); }
      break;
    }
    case 'doubleCta': {
      setVis('propDoubleCTA',true);
      attachRenameUI('propDoubleCTA', b);
      const [i1,i2] = b.items || [{},{}];
      const c1t=$$('#cta1Text'), c1h=$$('#cta1Href'), c2t=$$('#cta2Text'), c2h=$$('#cta2Href');
      if (c1t){ c1t.value = i1.text || ''; c1t.oninput = debounce(e=>{ b.items[0].text=e.target.value; autoSave(); },150); }
      if (c1h){ c1h.value = i1.href || ''; c1h.oninput = debounce(e=>{ b.items[0].href=e.target.value; autoSave(); },150); }
      if (c2t){ c2t.value = i2.text || ''; c2t.oninput = debounce(e=>{ b.items[1].text=e.target.value; autoSave(); },150); }
      if (c2h){ c2h.value = i2.href || ''; c2h.oninput = debounce(e=>{ b.items[1].href=e.target.value; autoSave(); },150); }
      break;
    }
  }
}

function scrollPropsIntoView(){
  const ids = ['propHeader','propH1','propText','propCTA','propDoubleCTA'];
  const el = ids.map(id=>$$('#'+id)).find(x=>x && x.hidden===false && x.style.display!=='none');
  if (el) el.scrollIntoView({ block:'nearest' });
}

/** ===========================
 *  HEADER VISIBILITY (no Upload)
 *  ===========================
 */
function toggleHeaderPanels(b){
  const isImg = (b.mode === 'image');
  setVis('hdrImageGate', false);
  setVis('hdrAltRow',    false);
  setVis('hdrUrlRow',    false);
  setVis('hdrLibRow',    false);
  if (!isImg){
    resetLibrarySearchUi();
    return;
  }
  setVis('hdrImageGate', true);
  toggleSourceRows(b);
}

function toggleSourceRows(b){
  const src = b.img?.source || '';
  setVis('hdrUrlRow', false);
  setVis('hdrLibRow', false);
  setVis('hdrAltRow', false);

  if (!src){
    resetLibrarySearchUi();
    return;
  }
  setVis('hdrAltRow', true);
  if (src==='url'){
    setVis('hdrUrlRow', true);
    resetLibrarySearchUi();
  } else if (src==='library'){
    setVis('hdrLibRow', true);
    prepareLibrarySearchUi();
  } else {
    resetLibrarySearchUi();
  }
}

// Ensure dropdown shows only URL/Library with new labels and removes Upload (even if present in HTML)
function patchImageSourceSelect(){
  const sel = $$('#hdrImgSource');
  if (!sel) return;
  const upRow = $$('#hdrUploadRow'); if (upRow) setVis(upRow,false);
  const opts = Array.from(sel.options || []);
  opts.forEach(o=>{
    if (o.value === 'url')      o.textContent = 'üîó URL';
    else if (o.value === 'library') o.textContent = 'üñºÔ∏è Library search';
    else if (o.value === 'upload')  sel.removeChild(o);
  });
}

/** ===========================
 *  HEADER LIBRARY UI
 *  ===========================
 */
function prepareLibrarySearchUi(){
  const input = $$('#hdrLibQuery');
  if (input && !input.dataset.init){
    input.dataset.init = '1';
    input.dataset.expanded = '0';
    setVis(input, false);
    input.addEventListener('keydown', e=>{
      if (e.key === 'Enter'){
        e.preventDefault();
        triggerHeaderLibrarySearch(state.blocks[0]);
      }
    });
  }
  const results = $$('#hdrLibResults');
  if (results && !results.dataset.touched){
    results.innerHTML = '<span class="library-message">Click Search to look up images.</span>';
  }
}

function resetLibrarySearchUi(opts={}){
  const { clearQuery=true } = opts;
  const input = $$('#hdrLibQuery');
  if (input){
    if (clearQuery) input.value = '';
    input.dataset.expanded = '0';
    setVis(input, false);
  }
  const results = $$('#hdrLibResults');
  if (results){
    delete results.dataset.touched;
    results.innerHTML = '<span class="library-message">Click Search to look up images.</span>';
  }
}

async function triggerHeaderLibrarySearch(header){
  const input = $$('#hdrLibQuery');
  const results = $$('#hdrLibResults');
  if (!input || !results) return;

  if (input.dataset.expanded !== '1'){
    input.dataset.expanded = '1';
    setVis(input, true);
    setTimeout(()=>{ try{ input.focus(); }catch(e){} }, 0);
    results.innerHTML = '<span class="library-message">Type a file name (e.g. ‚Äúpodcast-fr-3‚Äù) and press Enter.</span>';
    return;
  }

  const term = input.value.trim();
  if (!term){
    results.innerHTML = '<span class="library-message">Enter a name to search the library.</span>';
    input.focus();
    return;
  }

  results.dataset.touched = '1';
  results.innerHTML = '<span class="library-message">Searching‚Ä¶</span>';

  const { items, markup } = await searchLibrary(term);
  results.innerHTML = markup;
  if (!items.length) return;

  initLibraryCarousel(results);
  results.querySelectorAll('[data-pick-src]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      applyLibrarySelection(btn.getAttribute('data-pick-src') || '', header || state.blocks[0]);
    });
  });
}

function applyLibrarySelection(url, header){
  if (!url) return;
  const hdr = header || state.blocks[0];
  if (!hdr || hdr.type !== 'header') return;
  hdr.mode = 'image';
  hdr.img = hdr.img || {};
  hdr.img.src = url;
  hdr.img.source = 'library';
  const srcSel = $$('#hdrImgSource');
  if (srcSel) srcSel.value = 'library';
  toggleSourceRows(hdr);
  autoSave();
  renderProps();
}

/** ===========================
 *  RTE HELPERS
 *  ===========================
 */
function captureTextHtml(){
  const b = state.blocks[state.selectedIndex];
  if (b?.type!=='text') return;
  b.html = $$('#textHtml')?.innerHTML || '';
  autoSave();
}

// Remove entire <a>‚Ä¶</a> wrapper but keep inner text
function unwrapEntireLink(){
  const area = $$('#textHtml');
  if (!area) return;
  area.focus();
  const sel = window.getSelection();
  if (!sel || sel.rangeCount === 0) return;

  let node = sel.anchorNode;
  if (node && node.nodeType === 3) node = node.parentNode;
  let anchor = node && node.closest ? node.closest('a') : null;
  if (!anchor){
    const range = sel.getRangeAt(0);
    const common = range.commonAncestorContainer;
    anchor = (common.nodeType===3 ? common.parentNode : common).closest?.('a') || null;
  }
  if (!anchor) return;

  const parent = anchor.parentNode;
  while (anchor.firstChild) parent.insertBefore(anchor.firstChild, anchor);
  parent.removeChild(anchor);
}

/** ===========================
 *  ICONS / LABELS
 *  ===========================
 */
function iconFor(t){
  switch(t){
    case 'header': return '<i class="fa-regular fa-image accent"></i>';
    case 'h1': return '<i class="fa-solid fa-heading accent"></i>';
    case 'text': return '<i class="fa-regular fa-file-lines accent"></i>';
    case 'cta': return '<i class="fa-solid fa-square-arrow-up-right accent"></i>';
    case 'doubleCta': return '<i class="fa-regular fa-square-plus accent"></i>';
  } return '';
}
function labelFor(b){
  const def = defaultNameFor(b);
  const name = (b && b.name) ? b.name : def;
  return escapeHtml(name);
}

/** ===========================
 *  EMAIL HTML
 *  ===========================
 */
function generateHTML(){
  const head = `
<!--[if !mso]><!--><meta http-equiv="X-UA-Compatible" content="IE=edge"><!--<![endif]-->
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>#outlook a{padding:0}body{margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}table,td{border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt}img{border:0;height:auto;line-height:100%;outline:none;text-decoration:none;-ms-interpolation-mode:bicubic}p{display:block;margin:13px 0}</style>
<!--[if mso]><xml><o:OfficeDocumentSettings><o:AllowPNG/><o:PixelsPerInch>96</o:PixelsPerInch></o:OfficeDocumentSettings></xml><![endif]-->
<div style="display:none;font-size:1px;color:#ffffff;line-height:1px;max-height:0;max-width:0;opacity:0;overflow:hidden;">STIB MIVB</div>
<div style="background-color:#F7F7F7;">
<table align="center" role="presentation" width="100%"><tr><td>
<div style="margin:0 auto;max-width:600px;">
<table align="center" role="presentation" width="100%"><tr><td align="center">`;

  const startCard = `<div style="background:#ffffff;margin:0 auto;max-width:600px;border-radius:20px;"><table align="center" role="presentation" width="100%" bgcolor="#ffffff" style="border-radius:20px;"><tr><td align="center">`;
  const endCard   = `</td></tr></table></div>`;
  const tail      = `</td></tr></table></div></td></tr></table></div>`;
  const chunks = [];

  // top rounded spacer
  chunks.push(`${startCard}<div style="background:#ffffff;border-radius:20px 20px 0 0;height:20px;line-height:20px;font-size:0;">&nbsp;</div>${endCard}`);

  // HEADER (always index 0)
  const header = state.blocks[0];
  if (header?.mode==='image' && header.img?.src){
    chunks.push(`${startCard}
<table role="presentation" width="100%"><tr><td align="center">
  <img src="${escapeHtml(header.img.src)}" alt="${escapeHtml(header.img.alt||'')}" width="600" style="border-radius:20px 20px 0 0;display:block;width:100%;height:auto;">
</td></tr></table>
${endCard}`);
  }

  // CONTENT
  state.blocks.slice(1).forEach(b=>{
    if (b.type==='h1'){
      chunks.push(`
<div style="background:#ffffff;margin:0 auto;max-width:600px;border-radius:0 0 20px 20px;">
<table role="presentation" width="100%" bgcolor="#ffffff" style="border-radius:0 0 20px 20px;"><tr><td style="padding:25px 35px;">
  <h1 style="font-family: Impact, sans-serif, 'Oswald'; margin:0; line-height:48px; font-weight:500;">${escapeHtml(b.text||'This is H1')}</h1>
</td></tr></table>
</div>`);
    }
    if (b.type==='text'){
      const inner = b.html || 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ut risus nunc. Donec porta quis erat sed mattis.';
      chunks.push(`
<div style="background:#ffffff;margin:0 auto;max-width:600px;">
<table role="presentation" width="100%" bgcolor="#ffffff"><tr><td style="padding:0 35px 10px 35px;">
  <div style="font-family: Verdana, Geneva, sans-serif; font-size:16px; line-height:1.3em; color:#7D7E7F; margin-top:10px;">
    ${inner}
  </div>
</td></tr></table>
</div>`);
    }
    if (b.type==='cta'){
      chunks.push(`
<div style="background:#ffffff;margin:0 auto;max-width:600px;">
<table role="presentation" width="100%" bgcolor="#ffffff"><tr><td style="padding:10px 25px 0 0;">
  <table role="presentation" style="border-collapse:separate;line-height:100%;"><tr>
    <td style="width:30px;"></td>
    <td align="center" bgcolor="#005F9A" style="border:none;border-radius:10px;cursor:auto;background:#005F9A;">
      <a href="${escapeHtml(b.href||'#')}" target="_blank"
         style="display:inline-block;background:#005F9A;color:#ffffff;font-family:Verdana, Geneva, sans-serif;font-size:15px;font-weight:bold;line-height:100%;text-decoration:none;padding:10px 25px;border-radius:10px;">
        <strong style="color:#ffffff;">${escapeHtml(b.text||'SINGLE CTA >')}</strong>
      </a>
    </td>
  </tr></table>
</td></tr></table>
</div>`);
    }
    if (b.type==='doubleCta'){
      const i1 = b.items?.[0] || {text:'CTA 1 >',href:'#'};
      const i2 = b.items?.[1] || {text:'CTA 2 >',href:'#'};
      chunks.push(`
<div style="background:#ffffff;margin:0 auto;max-width:600px;">
<table role="presentation" width="100%" bgcolor="#ffffff"><tr><td style="padding:10px 25px 0 0;">
  <table role="presentation" style="border-collapse:separate;line-height:100%;"><tr>
    <td style="width:30px;"></td>
    <td align="center" bgcolor="#005F9A" style="border:none;border-radius:10px;background:#005F9A;">
      <a href="${escapeHtml(i1.href||'#')}" target="_blank"
         style="display:inline-block;background:#005F9A;color:#ffffff;font-family:Verdana, Geneva, sans-serif;font-size:15px;font-weight:bold;line-height:100%;text-decoration:none;padding:10px 25px;border-radius:10px;">
        <strong style="color:#ffffff;">${escapeHtml(i1.text||'CTA 1 >')}</strong>
      </a>
    </td>
    <td width="12" style="font-size:0;line-height:0;">&nbsp;</td>
    <td align="center" bgcolor="#005F9A" style="border:none;border-radius:10px;background:#005F9A;">
      <a href="${escapeHtml(i2.href||'#')}" target="_blank"
         style="display:inline-block;background:#005F9A;color:#ffffff;font-family:Verdana, Geneva, sans-serif;font-size:15px;font-weight:bold;line-height:100%;text-decoration:none;padding:10px 25px;border-radius:10px;">
        <strong style="color:#ffffff;">${escapeHtml(i2.text||'CTA 2 >')}</strong>
      </a>
    </td>
  </tr></table>
</td></tr></table>
</div>`);
    }
  });

  return head + startCard + endCard + chunks.join('') + tail + '\n' + FOOTER_TOKEN;
}

/** ===========================
 *  ASSETS
 *  ===========================
 */
// SIMPLE SEARCH (back-compat)
async function searchLibrary(term){
  const safeTerm = term || '';
  try{
    const url = new URL(ASSETS.list);
    if (safeTerm) url.searchParams.set('searchTerm', safeTerm);
    const res = await fetch(url.toString(), { credentials:'include' });
    if (!res.ok) throw new Error('list failed');
    const data = await res.json();
    const itemsRaw = Array.isArray(data?.items) ? data.items : [];
    const items = itemsRaw.map(x=>({
      name: x.name || '',
      url: x.url || '',
      thumbnail: x.thumbnail || x.url || ''
    })).filter(x=>x.url);

    if (!items.length){
      if (safeTerm){
        return { items: [], markup: `<span class="library-message">No results for ‚Äú${escapeHtml(safeTerm)}‚Äù.</span>` };
      }
      return { items: [], markup: '<span class="library-message">No results.</span>' };
    }

    return { items, markup: buildLibraryCarouselMarkup(items) };
  }catch(e){
    console.error(e);
    return { items: [], markup: '<span class="library-message">Error loading library.</span>' };
  }
}

function buildLibraryCarouselMarkup(items){
  const cards = items.map(item=>`
    <button type="button" class="library-card" data-pick-src="${escapeHtml(item.url)}">
      <span class="library-card__thumb">
        <img src="${escapeHtml(item.thumbnail)}" alt="">
      </span>
      <span class="library-card__name" title="${escapeHtml(item.name)}">${escapeHtml(item.name)}</span>
    </button>`).join('');

  return `
    <div class="library-carousel" data-count="${items.length}">
      <button type="button" class="carousel-nav prev" aria-label="Scroll left"><i class="fa-solid fa-chevron-left"></i></button>
      <div class="library-carousel__viewport">
        <div class="library-carousel__track">
          ${cards}
        </div>
      </div>
      <button type="button" class="carousel-nav next" aria-label="Scroll right"><i class="fa-solid fa-chevron-right"></i></button>
    </div>`;
}

function initLibraryCarousel(root){
  const carousel = root.querySelector('.library-carousel');
  if (!carousel) return;
  const viewport = carousel.querySelector('.library-carousel__viewport');
  const track = carousel.querySelector('.library-carousel__track');
  const prev = carousel.querySelector('.carousel-nav.prev');
  const next = carousel.querySelector('.carousel-nav.next');
  const cards = Array.from(carousel.querySelectorAll('.library-card'));
  if (!viewport || !prev || !next) return;

  const gap = track ? parseFloat(window.getComputedStyle(track).columnGap || '0') : 0;
  const stepSize = ()=>{
    if (!cards.length) return viewport.clientWidth;
    const width = cards[0].getBoundingClientRect().width;
    const cardsPerView = 3;
    return Math.max(viewport.clientWidth, (width * cardsPerView) + gap * (cardsPerView - 1));
  };

  const updateButtons = ()=>{
    if (cards.length <= 3){
      carousel.classList.add('is-nav-hidden');
    } else {
      carousel.classList.remove('is-nav-hidden');
    }
    const maxScroll = Math.max(0, viewport.scrollWidth - viewport.clientWidth - 4);
    prev.disabled = viewport.scrollLeft <= 4;
    next.disabled = viewport.scrollLeft >= maxScroll;
  };

  prev.onclick = ()=>{ viewport.scrollBy({ left: -stepSize(), behavior:'smooth' }); };
  next.onclick = ()=>{ viewport.scrollBy({ left: stepSize(), behavior:'smooth' }); };
  viewport.addEventListener('scroll', ()=>{ window.requestAnimationFrame(updateButtons); });
  setTimeout(updateButtons, 60);
}

function handleAssetBrowserMessage(event){
  if (!event || !event.data) return;
  if (BROWSER_ORIGIN && event.origin !== BROWSER_ORIGIN) return;
  if (browseWindow && event.source !== browseWindow) return;

  const data = event.data;
  if (data.type === 'asset-browser-ready' && event.source){
    browseWindow = event.source;
    return;
  }
  if (data.type === 'asset-selected' && data.url){
    applyLibrarySelection(data.url, state.blocks[0]);
    if (browseWindow && browseWindow === event.source){
      try{ browseWindow.close(); }catch(e){}
      browseWindow = null;
    }
  }
}

function openAssetBrowserWindow(){
  if (browseWindow && !browseWindow.closed){
    try{ browseWindow.focus(); return; }catch(e){}
  }

  const base = BROWSER_URL ? new URL(BROWSER_URL.toString()) : new URL(ASSETS.browserPage, window.location.href);
  const input = $$('#hdrLibQuery');
  if (input && input.dataset.expanded === '1' && input.value.trim()){
    base.searchParams.set('search', input.value.trim());
  }
  try{ base.searchParams.set('parentOrigin', window.location.origin); }catch(e){}

  const features = 'width=960,height=720,resizable=yes,scrollbars=yes';
  const child = window.open(base.toString(), 'AssetBrowserWindow', features);
  if (!child){
    alert('Please allow pop-ups to use the asset browser.');
    return;
  }
  browseWindow = child;
  try{ child.focus(); }catch(e){}
}
</script>




</body>
</html>
